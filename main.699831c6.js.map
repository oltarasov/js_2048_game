{"version":3,"sources":["scripts/main.js"],"names":["board","score","rows","columns","messageLost","document","querySelector","startButton","messageStart","messageWon","gameScore","gameActive","hasEmpty","some","row","includes","filterZero","filter","num","slide","rowCopy","i","length","innerText","push","setRandom","found","r","Math","floor","random","c","probability","tile","getElementById","toString","className","updateTile","setGame","classList","add","remove","Array","from","fill","querySelectorAll","forEach","id","addEventListener","handleKey","e","contains","prevState","JSON","parse","stringify","code","slideLeft","slideRight","slideUp","slideDown","isAble","isFull","noMoves","won","map","updateBoard","newRow","reverse","newBoard","col","newCol","prev","arr","every","cell"],"mappings":"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","file":"main.699831c6.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nlet board;\nlet score = 0;\nconst rows = 4;\nconst columns = 4;\nconst messageLost = document.querySelector('.message-lose');\nconst startButton = document.querySelector('.start');\nconst messageStart = document.querySelector('.message-start');\nconst messageWon = document.querySelector('.message-win');\nconst gameScore = document.querySelector('.game-score');\nlet gameActive = false; // Додали змінну для відстеження активності гри\n\nfunction hasEmpty() {\n  return board.some(row => row.includes(0));\n}\n\nfunction filterZero(row) {\n  return row.filter(num => num !== 0);\n}\n\nfunction slide(row) {\n  let rowCopy = [...row];\n\n  rowCopy = filterZero(rowCopy);\n\n  for (let i = 0; i < rowCopy.length - 1; i++) {\n    if (rowCopy[i] === rowCopy[i + 1]) {\n      rowCopy[i] *= 2;\n      rowCopy[i + 1] = 0;\n      score += rowCopy[i];\n      gameScore.innerText = score;\n    }\n  }\n\n  rowCopy = filterZero(rowCopy);\n\n  while (rowCopy.length < columns) {\n    rowCopy.push(0);\n  }\n\n  return rowCopy;\n}\n\nfunction setRandom() {\n  if (!hasEmpty()) {\n    return;\n  }\n\n  let found = false;\n\n  while (!found) {\n    const r = Math.floor(Math.random() * rows);\n    const c = Math.floor(Math.random() * columns);\n\n    if (board[r][c] === 0) {\n      const probability = Math.floor(Math.random() * 10);\n      const tile = document.getElementById(`${r}-${c}`);\n\n      found = true;\n\n      if (probability === 0) {\n        const num = 4;\n\n        board[r][c] = num;\n        tile.innerText = num.toString();\n        tile.className = `field-cell field-cell--${num}`;\n      } else {\n        const num = 2;\n\n        board[r][c] = num;\n        tile.innerText = num.toString();\n        tile.className = `field-cell field-cell--${num}`;\n      }\n    }\n  }\n}\n\nfunction updateTile(tile, num) {\n  tile.innerText = '';\n  tile.className = 'field-cell';\n\n  if (num > 0) {\n    tile.innerText = num;\n\n    if (num <= 2048) {\n      tile.className = `field-cell field-cell--${num}`;\n    }\n  }\n}\n\nstartButton.addEventListener('click', setGame);\n\nfunction setGame() {\n  score = 0;\n  gameScore.innerText = score;\n  messageStart.classList.add('hidden');\n  startButton.classList.remove('start');\n  startButton.classList.add('restart');\n  startButton.innerText = 'Restart';\n\n  board = Array.from({ length: rows }, () => Array(columns).fill(0));\n\n  const fieldRows = document.querySelectorAll('.field-row');\n\n  fieldRows.forEach((row, r) => {\n    const tiles = row.querySelectorAll('.field-cell');\n\n    tiles.forEach((tile, c) => {\n      tile.id = `${r}-${c}`;\n      updateTile(tile, 0);\n    });\n  });\n\n  setRandom();\n  setRandom();\n\n  // Додати обробник подій після рестарту\n  messageLost.classList.add('hidden');\n\n  if (!gameActive) {\n    document.addEventListener('keyup', handleKey);\n    gameActive = true;\n  }\n}\n\n// Розділити функцію handleKey на окремі функції для обробки різних клавіш\nfunction handleKey(e) {\n  if (messageLost.classList.contains('hidden')\n  && messageWon.classList.contains('hidden')) {\n    const prevState = JSON.parse(JSON.stringify(board));\n\n    switch (e.code) {\n      case 'ArrowLeft':\n        slideLeft();\n        break;\n      case 'ArrowRight':\n        slideRight();\n        break;\n      case 'ArrowUp':\n        slideUp();\n        break;\n      case 'ArrowDown':\n        slideDown();\n        break;\n    }\n\n    if (isAble(prevState)) {\n      setRandom();\n    }\n\n    if (isFull(board) && noMoves(board)) {\n      messageLost.classList.remove('hidden');\n      // gameActive = false; // Вимкнути гру після програшу\n    }\n\n    if (won(board)) {\n      messageWon.classList.remove('hidden');\n      gameActive = false; // Вимкнути гру після перемоги\n    }\n  }\n}\n\n// Змініть обробник подій на відповідні функції\nfunction slideLeft() {\n  board = board.map(row => slide(row));\n  updateBoard();\n}\n\nfunction slideRight() {\n  board = board.map(row => {\n    const newRow = slide([...row].reverse()).reverse();\n\n    return newRow;\n  });\n  updateBoard();\n}\n\nfunction slideUp() {\n  const newBoard = Array.from({ length: rows }, () => []);\n\n  for (let c = 0; c < columns; c++) {\n    const col = board.map(row => row[c]);\n    const newCol = slide(col);\n\n    for (let r = 0; r < rows; r++) {\n      newBoard[r][c] = newCol[r];\n    }\n  }\n\n  board = newBoard;\n  updateBoard();\n}\n\nfunction slideDown() {\n  const newBoard = Array.from({ length: rows }, () => []);\n\n  for (let c = 0; c < columns; c++) {\n    const col = board.map(row => row[c]);\n\n    col.reverse();\n\n    const newCol = slide(col);\n\n    newCol.reverse();\n\n    for (let r = 0; r < rows; r++) {\n      newBoard[r][c] = newCol[r];\n    }\n  }\n\n  board = newBoard;\n  updateBoard();\n}\n\n// Додайте видалення обробника подій при програші або перемозі\nfunction updateBoard() {\n  const fieldRows = document.querySelectorAll('.field-row');\n\n  fieldRows.forEach((row, r) => {\n    const tiles = row.querySelectorAll('.field-cell');\n\n    tiles.forEach((tile, c) => {\n      updateTile(tile, board[r][c]);\n    });\n  });\n}\n\nfunction isAble(prev) {\n  return JSON.stringify(prev) !== JSON.stringify(board);\n}\n\nfunction isFull(arr) {\n  return arr.every(row => row.every(cell => cell !== 0));\n}\n\nfunction noMoves(arr) {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns - 1; c++) {\n      if (arr[r][c] === arr[r][c + 1]) {\n        return false;\n      }\n    }\n  }\n\n  for (let r = 0; r < rows - 1; r++) {\n    for (let c = 0; c < columns; c++) {\n      if (arr[r][c] === arr[r + 1][c]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction won(arr) {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      if (arr[r][c] === 2048) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nsetGame();\n"]}